var search_data = {"index":{"searchIndex":["colored","lobotomy","drawwr","quiz","stats","add()","array_to_hash()","check_file()","color()","colorize()","colors()","compare_stats_data()","dir_tree_create_if_not_exist()","extra()","launch()","list_to_array()","list_to_hash()","load()","load_results()","method_missing()","new()","new()","new()","on_bad_answer()","on_good_answer()","pick()","question_label()","random_number()","results()","save()","save_results()","select_compare_set()","split_to_array()"],"longSearchIndex":["colored","lobotomy","lobotomy::drawwr","lobotomy::quiz","lobotomy::stats","lobotomy::stats#add()","lobotomy::array_to_hash()","lobotomy::check_file()","colored#color()","colored#colorize()","colored#colors()","lobotomy::stats#compare_stats_data()","lobotomy::stats#dir_tree_create_if_not_exist()","colored#extra()","lobotomy::quiz#launch()","lobotomy::list_to_array()","lobotomy::list_to_hash()","lobotomy::stats#load()","lobotomy::quiz#load_results()","lobotomy::quiz#method_missing()","lobotomy::drawwr::new()","lobotomy::quiz::new()","lobotomy::stats::new()","lobotomy::quiz#on_bad_answer()","lobotomy::quiz#on_good_answer()","lobotomy::drawwr#pick()","lobotomy::quiz#question_label()","lobotomy::drawwr#random_number()","lobotomy::quiz#results()","lobotomy::stats#save()","lobotomy::quiz#save_results()","lobotomy::stats#select_compare_set()","lobotomy::split_to_array()"],"info":[["Colored","","Colored.html","","<p>Code taken from: github.com/defunkt/colored &gt;&gt; “this is red”.red\n<p>&gt;&gt; “this is …\n"],["Lobotomy","","Lobotomy.html","","<p>#\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Lobotomy</span> <span class=\"ruby-keyword\">module</span>\n<span class=\"ruby-constant\">Contains</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">set</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">methods</span> <span class=\"ruby-keyword\">and</span> <span class=\"ruby-keyword\">class</span> <span class=\"ruby-keyword\">in</span> <span class=\"ruby-identifier\">order</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">create</span> <span class=\"ruby-identifier\">command</span> <span class=\"ruby-identifier\">line</span> <span class=\"ruby-identifier\">quiz</span>\n</pre>\n"],["Lobotomy::DrawWR","","Lobotomy/DrawWR.html","","<p>Generate multiple draw without replacement on a data set\n"],["Lobotomy::Quiz","","Lobotomy/Quiz.html","","<p>Generate a quiz from a set of data in a file. Each lines in the file is an\nentry. In each line there …\n"],["Lobotomy::Stats","","Lobotomy/Stats.html","","<p>Record/load some data\n"],["add","Lobotomy::Stats","Lobotomy/Stats.html#method-i-add","(entry_index, stats)",""],["array_to_hash","Lobotomy","Lobotomy.html#method-c-array_to_hash","(symbols, array)","<p># get an hash from an array of value and an array of symbols\n"],["check_file","Lobotomy","Lobotomy.html#method-c-check_file","(filename)","<p># Check if filename exist and return its fullname or nil\n"],["color","Colored","Colored.html#method-i-color","(color_name)",""],["colorize","Colored","Colored.html#method-i-colorize","(string, options = {})",""],["colors","Colored","Colored.html#method-i-colors","()",""],["compare_stats_data","Lobotomy::Stats","Lobotomy/Stats.html#method-i-compare_stats_data","(set_1, set_2)",""],["dir_tree_create_if_not_exist","Lobotomy::Stats","Lobotomy/Stats.html#method-i-dir_tree_create_if_not_exist","()",""],["extra","Colored","Colored.html#method-i-extra","(extra_name)",""],["launch","Lobotomy::Quiz","Lobotomy/Quiz.html#method-i-launch","(nb_questions = 20)","<p># launch the quiz\n<p><strong>Args</strong>    :\n<p><code>nb_questions</code> -&gt; the number of questions for the current\nquiz\n"],["list_to_array","Lobotomy","Lobotomy.html#method-c-list_to_array","(filename, col_sep, col_sub_sep = nil)","<p># Read data from a formated file and create an array\n"],["list_to_hash","Lobotomy","Lobotomy.html#method-c-list_to_hash","(file, symbols, col_sep, col_sub_sep = nil)","<p># Read data from a formated file and create an array of hash with symbols\n"],["load","Lobotomy::Stats","Lobotomy/Stats.html#method-i-load","()",""],["load_results","Lobotomy::Quiz","Lobotomy/Quiz.html#method-i-load_results","()","<p># Load old results from a Marshall dump file:\n"],["method_missing","Lobotomy::Quiz","Lobotomy/Quiz.html#method-i-method_missing","(method, *args, &block)",""],["new","Lobotomy::DrawWR","Lobotomy/DrawWR.html#method-c-new","(data)",""],["new","Lobotomy::Quiz","Lobotomy/Quiz.html#method-c-new","(quiz_name, file, symbols, col_sep, col_sub_sep = nil)","<p>create a new Quiz object\n<p><strong>Args</strong>    :\n<p><code>quiz_name</code> -&gt; name of the quiz (used to defined the filename\nof\n"],["new","Lobotomy::Stats","Lobotomy/Stats.html#method-c-new","(data, symbols, session = ENV['USER'], file = 'stats.dump')","<p># Create a new Stats class datas =&gt; array of datas used by the quiz\nsymbols =&gt; array of ruby symbols …\n"],["on_bad_answer","Lobotomy::Quiz","Lobotomy/Quiz.html#method-i-on_bad_answer","(&block)",""],["on_good_answer","Lobotomy::Quiz","Lobotomy/Quiz.html#method-i-on_good_answer","(&block)",""],["pick","Lobotomy::DrawWR","Lobotomy/DrawWR.html#method-i-pick","()","<p># get a random entry in the entries set. This is a draw without replacement\neach entry will be selected. …\n"],["question_label","Lobotomy::Quiz","Lobotomy/Quiz.html#method-i-question_label","(string = nil)","<p># adapt the displayed question for your need.\n<p><strong>Args</strong>    :\n<p><code>string</code> -&gt; a string. Must contains at least one …\n"],["random_number","Lobotomy::DrawWR","Lobotomy/DrawWR.html#method-i-random_number","()",""],["results","Lobotomy::Quiz","Lobotomy/Quiz.html#method-i-results","()","<p># return the stats class for to the current quiz\n"],["save","Lobotomy::Stats","Lobotomy/Stats.html#method-i-save","()",""],["save_results","Lobotomy::Quiz","Lobotomy/Quiz.html#method-i-save_results","()","<p># Save the current results to a Marshall dump file:\n"],["select_compare_set","Lobotomy::Stats","Lobotomy/Stats.html#method-i-select_compare_set","(hash)",""],["split_to_array","Lobotomy","Lobotomy.html#method-c-split_to_array","(string, sep, sub_sep)","<p>#\n\n<pre>Split a line into an array based on separator</pre>\n"]]}}